{"version":3,"file":"static/webpack/static/development/pages/index.js.9abb7654998cabcdbe30.hot-update.js","sources":["webpack:///./pages/curveAnalysis/butterfly/index.js","webpack:///./pages/curveAnalysis/butterflyQuilt/index.js","webpack:///./pages/curveAnalysis/tracing/index.js","webpack:///./pages/dataset/quilt/index.js"],"sourcesContent":["import { Surface, Text } from 'components/ui'\nimport Figure from 'components/figure'\n\nconst Header = ({ children }) => (\n  <Text\n    marginBottom={10}\n    borderBottom=\"1px solid rgba(0, 0, 0, 0.2)\"\n    paddingBottom={1}\n    paddingLeft={5}\n    width={'100%'}\n    fontSize={16}\n    fontWeight={600}\n  >\n    {children}\n  </Text>\n)\n\nconst size = 264\n\nexport default () => (\n  <Figure>\n    <Surface flexFlow=\"row\" alignSelf=\"center\">\n      <Surface marginX={5}>\n        <Header>Source</Header>\n        <img\n          width={size}\n          src=\"https://storage.googleapis.com/distill-curve-detectors/three_examples/butterfly_leaf/source.png\"\n        />\n      </Surface>\n      <Surface marginX={5}>\n        <Header>Tracing</Header>\n        <video\n          width={size}\n          height={size}\n          controls\n          poster=\"https://storage.googleapis.com/distill-curve-detectors/three_examples/butterfly_leaf/frame_99.png\"\n          src=\"https://storage.googleapis.com/distill-curve-detectors/three_examples/butterfly_leaf/movie_butterfly_leaf.mp4\"\n        />\n      </Surface>\n      <Surface marginX={5}>\n        <Header>Tracing NMF Components</Header>\n        <video\n          width={size}\n          height={size}\n          controls\n          poster=\"https://storage.googleapis.com/distill-curve-detectors/three_examples/butterfly/frame_99.png\"\n          src=\"https://storage.googleapis.com/distill-curve-detectors/three_examples/butterfly/movie_butterfly.mp4\"\n        />\n      </Surface>\n    </Surface>\n  </Figure>\n)\n","import { Surface } from 'components/ui'\nimport { range } from 'lodash'\nimport Colab from 'components/colab'\n\nconst rows = 3\nconst cols = 5\nconst size = 180\nconst ourFavorites = [0, 4, 5, 6, 7, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19]\nexport default () => (\n  <Surface marginY={40} gridColumn=\"screen\" alignItems=\"center\">\n    <Surface>\n      {range(rows).map((row) => (\n        <Surface flexFlow=\"row\">\n          {range(cols).map((col) => {\n            const index = ourFavorites[row * cols + col]\n            return (\n              <video\n                style={{\n                  width: size,\n                  height: size,\n                  margin: 0,\n                  padding: 0,\n                  objectFit: 'cover',\n                }}\n                width={size}\n                height={size}\n                muted\n                loop\n                autoPlay\n                src={`https://storage.googleapis.com/distill-curve-detectors/butterfly_quilt_all_v3/10_5000000/${index}/movie_${index}.mp4`}\n              />\n            )\n          })}\n        </Surface>\n      ))}\n    </Surface>\n    <Surface\n      flexFlow=\"row\"\n      justifyContent=\"space-between\"\n      width={880}\n      alignSelf=\"center\"\n      marginTop={5}\n    >\n      <figcaption>\n        We traced 23 butterfly images and chose our 15 favorites.\n      </figcaption>\n      <Colab href=\"https://colab.research.google.com/drive/1lnFJ0MjhPzw3J9u-Xhqvn5hjAF9sZ3aY#scrollTo=yBQX5TrkWjlP\" />\n    </Surface>\n  </Surface>\n)\n","import { Surface, Text } from 'components/ui'\nimport Figure from 'components/figure'\nimport Colab from 'components/colab'\n\nconst Header = ({ children }) => (\n  <Text\n    marginBottom={10}\n    borderBottom=\"1px solid rgba(0, 0, 0, 0.2)\"\n    paddingBottom={1}\n    paddingLeft={5}\n    width={'100%'}\n    fontSize={16}\n    fontWeight={600}\n  >\n    {children}\n  </Text>\n)\n\nconst size = 230\nconst Row = ({ name, header, children }) => (\n  <Surface marginX={20} width={500}>\n    <Header>{header}</Header>\n    <Surface flexFlow=\"row\">\n      <img\n        width={size}\n        height={size}\n        style={{ marginRight: 10 }}\n        src={`https://storage.cloud.google.com/distill-curve-detectors/three_examples/${name}/source.png`}\n      />\n\n      <video\n        width={size}\n        height={size}\n        controls\n        style={{ marginLeft: 10 }}\n        poster={`https://storage.cloud.google.com/distill-curve-detectors/three_examples/${name}/frame_99.png`}\n        src={`https://storage.cloud.google.com/distill-curve-detectors/three_examples/${name}/movie_${name}.mp4`}\n      />\n    </Surface>\n    <figcaption\n      style={{\n        width: 490,\n        marginTop: 10,\n        paddingLeft: 5,\n        paddingRight: 5,\n      }}\n    >\n      {children}\n    </figcaption>\n  </Surface>\n)\n\nexport default () => (\n  <Figure>\n    <Surface alignSelf=\"center\">\n      <Surface flexFlow=\"row\">\n        <Row name=\"curve\" header=\"Occlusion\">\n          Our splines can trace curves even if they have significant occlusion.\n          Furthermore, we can use attribution to construct complex occlusion\n          rules. For instance, we can strongly penalize our spline for\n          overlapping with a particular object or texture, disincentivizing the\n          spline from connecting visual curves that are occluded by these\n          features.\n        </Row>\n        <Row name=\"subtleS\" header=\"Subtle Curve\">\n          Since curve neurons are robust to a wide variety of natural visual\n          features, our curve tracing algorithm can be applied to subtle curves\n          in images.\n        </Row>\n      </Surface>\n      {false && (\n        <Row name=\"butterfly\" header=\"Selectivity Through Attribution\">\n          As we showed with curve extraction, we can use attribution vectors to\n          highlight or inhibit different parts of an image. In this image we\n          selectively target butterflies with one spline and leaves with\n          another.\n        </Row>\n      )}\n    </Surface>\n    <Surface marginLeft={20} alignSelf=\"center\" marginTop={20}>\n      <Header>Complex Shapes</Header>\n      <Surface flexFlow=\"row\" flexWrap=\"wrap\" width={1043}>\n        {[5, 7, 8, 9].map((index) => {\n          const smallSize = 115\n          return (\n            <Surface flexFlow=\"row\" marginX={10} paddingBottom={10}>\n              <img\n                width={smallSize}\n                height={smallSize}\n                src={`https://storage.googleapis.com/distill-curve-detectors/three_examples/crest${index}_v3/source.png`}\n              />\n              {false && (\n                <img\n                  width={smallSize}\n                  height={smallSize}\n                  src={`https://storage.googleapis.com/distill-curve-detectors/three_examples/crest${index}_v3/frame_99.png`}\n                />\n              )}\n              <video\n                width={smallSize}\n                height={smallSize}\n                controls\n                autoPlay\n                mute\n                poster={`https://storage.cloud.google.com/distill-curve-detectors/three_examples/crest${index}_v3/frame_99.png`}\n                src={`https://storage.googleapis.com/distill-curve-detectors/three_examples/crest${index}_v3/movie_crest${index}_v3.mp4`}\n              />\n            </Surface>\n          )\n        })}\n      </Surface>\n      <Surface alignSelf=\"flex-end\">\n        <Colab href=\"https://colab.research.google.com/drive/1lnFJ0MjhPzw3J9u-Xhqvn5hjAF9sZ3aY#scrollTo=K5AB2S99PmC5&line=1&uniqifier=1\" />\n      </Surface>\n    </Surface>\n  </Figure>\n)\n","import Figure from 'components/figure'\nimport { range } from 'lodash'\nimport { Icon } from 'evergreen-ui'\nimport { Surface, Text, ZoomedImg } from 'components/ui'\nimport { featureVis } from 'components/helpers'\nimport Colab from 'components/colab'\nimport React from 'react'\n\nexport default class DatasetQuilt extends React.Component {\n  state = { showAttrs: false, page: 0 }\n\n  componentWillMount() {\n    if (this.props.isAttrs) {\n      this.setState({ showAttrs: true })\n    }\n  }\n\n  render() {\n    const { isAttrs = false } = this.props\n    const { showAttrs, page } = this.state\n\n    return (\n      <Figure>\n        <Surface alignSelf=\"center\" marginTop={10}>\n          <Surface\n            flexFlow=\"row\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n            paddingX={20}\n            marginBottom={10}\n          >\n            <Surface flexFlow=\"row\" alignItems=\"center\">\n              <Text fontSize={20}>‚Üê</Text>\n              <Text size={500} marginLeft={10}>\n                more <b>negative</b> activations\n              </Text>\n            </Surface>\n            <Surface flexFlow=\"row\" alignSelf=\"center\" alignItems=\"center\">\n              <Surface flexFlow=\"row\" alignItems=\"center\">\n                <Text marginRight={5}>Random Dataset Images by </Text>\n                <img\n                  src={featureVis('inceptionv1', 'mixed3b', 379)}\n                  width={30}\n                  style={{ borderRadius: 5 }}\n                />\n                <Text marginLeft={5}>\n                  3b:379 {showAttrs ? 'Attribution' : 'Activation'}\n                </Text>\n              </Surface>\n              {isAttrs && (\n                <Surface cursor=\"pointer\" marginLeft={10}>\n                  {(hovering) => (\n                    <Text\n                      style={{ borderBottom: '1px solid rgba(0, 0, 0, 0.1)' }}\n                      size={500}\n                      fontWeight={500}\n                      opacity={hovering ? 1 : 0.8}\n                      onClick={() => {\n                        if (isAttrs) {\n                          this.setState({ showAttrs: !showAttrs })\n                        }\n                      }}\n                    >\n                      {showAttrs ? 'Show images' : 'Show attribution'}\n                    </Text>\n                  )}\n                </Surface>\n              )}\n            </Surface>\n            <Surface flexFlow=\"row\" alignItems=\"center\">\n              <Text size={500} marginRight={10}>\n                more <b>positive</b> activations\n              </Text>\n              <Text fontSize={20}>‚Üí</Text>\n            </Surface>\n          </Surface>\n          <Surface flexFlow=\"row\" position=\"relative\" onMouseDown={() => {}}>\n            {range(18).map((i) => {\n              const value = -800 + i * 100\n\n              const count = 6\n              const size = 60\n\n              return (\n                <React.Fragment>\n                  {value === 0 && (\n                    <Surface\n                      marginX={5}\n                      width={1}\n                      height={count * size + 4 * count}\n                      background=\"rgba(0, 0, 0, 0.2)\"\n                    ></Surface>\n                  )}\n                  <Surface marginX={2}>\n                    {range(count).map((index) => {\n                      const indexWithPage = page * count + index\n                      const prefix = `https://storage.googleapis.com/distill-curve-detectors/quilt/${value}/${indexWithPage}`\n\n                      return (\n                        <Surface\n                          flexFlow=\"row\"\n                          marginY={2}\n                          position=\"relative\"\n                          width={size}\n                          height={size}\n                          overflow=\"hidden\"\n                          borderRadius={3}\n                          border=\"1px solid rgba(0, 0, 0, 0.2)\"\n                        >\n                          <img\n                            style={{\n                              position: 'absolute',\n                              left: 0,\n                              top: 0,\n                              opacity: showAttrs ? 0 : 1,\n                              transition: '300ms all ease-in',\n                            }}\n                            width={size}\n                            src={`${prefix}/img.jpg`}\n                          />\n                          <img\n                            style={{\n                              position: 'absolute',\n                              left: 0,\n                              top: 0,\n                              opacity: showAttrs ? 1 : 0,\n                              transition: '300ms all ease-in',\n                            }}\n                            width={size}\n                            src={`${prefix}/attr.jpg`}\n                          />\n                        </Surface>\n                      )\n                    })}\n                    <Surface borderTop marginTop={4} paddingLeft={3}>\n                      <Text>\n                        {value === 900 || value === -800 ? `${value}+` : value}\n                      </Text>\n                    </Surface>\n                  </Surface>\n                </React.Fragment>\n              )\n            })}\n          </Surface>\n          <img\n            style={{ transform: 'translateX(3px)', marginTop: 5 }}\n            width={1158}\n            src={require('./caption.svg')}\n          />\n          <Surface\n            alignSelf=\"flex-end\"\n            flexFlow=\"row\"\n            alignItems=\"center\"\n            marginTop={30}\n            marginRight={0}\n            marginBottom={10}\n            paddingY={2}\n          >\n            {page < 3 && (\n              <Surface cursor=\"pointer\" background=\"transparent\">\n                {(hovering) => (\n                  <Surface\n                    style={{\n                      borderBottom: `1px solid rgba(0, 0, 0, ${\n                        hovering ? 0.4 : 0.1\n                      }`,\n                    }}\n                    opacity={hovering ? 1 : 0.7}\n                    transition=\"200ms ease-out all\"\n                    flexFlow=\"row\"\n                    alignItems=\"center\"\n                  >\n                    <Text\n                      fontWeight={600}\n                      size={400}\n                      onClick={() => {\n                        this.setState({ page: page + 1 })\n                      }}\n                    >\n                      Load more examples\n                    </Text>\n                  </Surface>\n                )}\n              </Surface>\n            )}\n            {isAttrs && (\n              <Colab\n                marginLeft={15}\n                href=\"https://colab.research.google.com/drive/1lnFJ0MjhPzw3J9u-Xhqvn5hjAF9sZ3aY#scrollTo=yBQX5TrkWjlP\"\n              />\n            )}\n          </Surface>\n        </Surface>\n      </Figure>\n    )\n  }\n}\n"],"mappings":"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","sourceRoot":""}